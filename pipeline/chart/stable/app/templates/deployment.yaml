apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.application.name }}-deploy
  namespace: {{ .Values.application.namespace }}
  labels:
    alias: {{ .Values.application.name }}-pod
    app: {{ .Values.application.name }}
    version: v1
spec:
  selector:
    matchLabels:
      app: {{ .Values.application.name }}
      version: v1
  replicas: {{ .Values.application.containers.replicas.min }}
  minReadySeconds: {{ .Values.application.minReadySeconds }}
  revisionHistoryLimit: 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.application.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.application.rollingUpdate.maxUnavailable }}
  template:
    metadata:
      labels:
        app: {{ .Values.application.name }}
        version: v1
    spec:
      containers:
        - name: {{ .Values.application.name }}
          image: {{ .Values.application.containers.image }}
          ports:
            - name: service-port
              containerPort: {{ .Values.service.app.targetPort }}
          env:
            - name: build_version
              value: "{{ .Values.application.build_number }}"
          resources:
            requests:
              memory: "{{ .Values.application.containers.resources.requests.memory }}"
              cpu: "{{ .Values.application.containers.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.application.containers.resources.limits.memory }}"
              cpu: "{{ .Values.application.containers.resources.limits.cpu }} "
          {{ if .Values.application.probe.startupProbe }}
          startupProbe:
            httpGet:
              httpHeaders:
                - name: Accept
                  value: application/json
              path: {{ .Values.application.probe.startupProbe.httpGet.path }}
              port: {{ .Values.service.app.targetPort }}
            initialDelaySeconds: {{ .Values.application.probe.startupProbe.initialDelaySeconds }}
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 120
          {{ end }}
          {{ if .Values.application.probe.readinessProbe }}
          readinessProbe:
            httpGet:
              path: {{ .Values.application.probe.readinessProbe.httpGet.path }}
              port: {{ .Values.service.app.targetPort }}
            initialDelaySeconds: {{ .Values.application.probe.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          {{ end }}
          {{ if .Values.application.probe.livenessProbe }}
          livenessProbe:
            httpGet:
              path: {{ .Values.application.probe.livenessProbe.httpGet.path }}
              port: {{ .Values.service.app.targetPort }}
            initialDelaySeconds: {{ .Values.application.probe.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          {{ end }}
      terminationGracePeriodSeconds: {{ .Values.application.terminationGracePeriodSeconds }}
      {{- if .Values.affinity }}
      affinity: {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ .Values.application.name }}
              version: v1